rules_version = '2';

service cloud.firestore {
match /databases/{database}/documents {
  	function isEmailValid() {
    	return request.auth != null
          	&& request.auth.token.email != null
            && request.auth.token.email.matches('.*@dgkralupy[.](eu|cz)')
    }
    function isAdmin() {
    	return request.auth.token.email in get(/databases/$(database)/documents/settings/private).data.admins
    }
    function signedUpCorrectly(destination, capacity) {
        return isEmailValid()
            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([destination])
            && request.resource.data[destination].size() == resource.data[destination].size() + 1
            && (
                resource.data[destination].size() == 0
             || resource.data[destination] == request.resource.data[destination][0:resource.data[destination].size()]
            )
            && request.resource.data[destination][request.resource.data[destination].size() - 1] == request.auth.token.email
            && request.resource.data[destination].size() <= capacity
            && !(request.auth.token.email in resource.data[destination])
            && request.time >= get(/databases/$(database)/documents/settings/public).data.start_time
            && !exists(/databases/$(database)/documents/users/$(request.auth.token.email))
            && existsAfter(/databases/$(database)/documents/users/$(request.auth.token.email))
    }
    function isInEvent(event_id) {
        let event = getAfter(/databases/$(database)/documents/events/$(event_id));
        return request.auth.token.email in event.data.participants || request.auth.token.email in event.data.substitutes
    }

  	match /users/{document} {
        allow read, delete: if (isEmailValid() && isAdmin())
    	allow read: if resource == null || request.auth.token.email == resource.data.email
        allow create: if (
            isEmailValid()
            && document == request.auth.token.email
            && request.resource.data.keys().hasOnly(['email', 'event_id'])
            && request.resource.data.keys().hasAll(['email', 'event_id'])
            && request.resource.data.email == request.auth.token.email
            && isInEvent(request.resource.data.event_id)
        )
    }
  	match /events/{document} {
  	    allow read;
  	    allow update: if (
            signedUpCorrectly('participants', resource.data.capacity)
            || signedUpCorrectly('substitutes', 10)
        )
        allow write: if (isEmailValid() && isAdmin())
  	}
    match /settings {
        match /public {
            allow read;
        }
        match /{document} {
   		 	allow read, update: if (isEmailValid() && isAdmin())
        }
    }
}}